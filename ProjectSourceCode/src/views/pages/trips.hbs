<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="styles.css">
  <title>All Trips Page</title>
  <link
    rel="stylesheet"
    href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
  />
  <link rel="stylesheet" href="/css/styles.css" />
  <style>
  body {
    background-color: #f8fcf9;
    color: #000;
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    min-height: 100vh;
  }

  h1 {
    margin-top: 2rem;
    text-align: center;
    font-weight: bold;
    color: #004d40;
  }

  .card {
    background-color: #ffffff;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);
    transition: transform 0.2s ease;
  }

  .card:hover {
    transform: translateY(-4px);
  }

  .card-title {
    color: #00796b;
    font-weight: 600;
  }

  .btn-outline-info {
    border-color: #24a2e2;
    color: #24a2e2;
  }

  .btn-outline-info:hover {
    background-color: #24a2e2;
    color: #fff;
  }

  .btn-primary {
    background-color: #63c8b0;
    border: none;
    font-weight: 600;
  }

  .btn-primary:hover {
    background-color: #47b39c;
  }

  .btn-success {
    background-color: #00b894;
    border: none;
    font-weight: 600;
  }

  .btn-success:hover {
    background-color: #009e80;
  }

  .modal-content {
    border-radius: 10px;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.05);
  }

  label {
    font-weight: 500;
  }

  .form-control {
    background-color: #f4f7f6;
    border: 1px solid #ccc;
    color: #333;
  }

  .form-control::placeholder {
    color: #888;
  }

  .invalid-feedback {
    font-size: 0.9rem;
  }
</style>

</head>
<body>
<div class="container">
  <h1>All Trips</h1>
  {{#if trips.length}}
  <div class="row">
    {{#each trips}}
      <div id="trip-{{trip_id}}" class="col-md-6 mb-4">
        <!-- Trip Card that takes up half the screen width -->
        <div class="card">
          <div class="card-body d-flex flex-column">
            <h2 class="card-title">{{trip_name}}</h2>
            <p><strong>Start Date:</strong> {{formatDate date_start}}</p>
            <p><strong>End Date:</strong> {{formatDate date_end}}</p>
            {{#if city}}<p><strong>City:</strong> {{city}}</p>{{/if}}
            {{#if country}}<p><strong>Country:</strong> {{country}}</p>{{/if}}

            <!-- List of Events/Activities associated with this trip -->
            <div class="mt-auto d-flex justify-content-between">
              <!-- View Details button on the left -->
              <form action="/trips/{{this.trip_id}}" method="GET">
                <button type="submit" class="btn btn-outline-info">
                  <i class="bi bi-eye"></i> View Details
                </button>
              </form>

              <!-- Delete Trip button on the right -->
              <button class="btn btn-danger" onclick="deleteTrip({{this.trip_id}})">Delete Trip</button>
            </div>
          </div>
        </div>
      </div>
    {{/each}}
  </div>
{{else}}
  <p>No trips available.</p>
{{/if}}

             
            
  <div class="d-flex justify-content-end mb-4">
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createTripModal">
      <i class="bi bi-plus-circle"></i> Create Trip
    </button>
  </div>

 <!--Modal for Deleting trips -->
  <div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteConfirmationModalLabel">Confirm Deletion</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        Are you sure you want to delete this trip?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button> 
      <form action="/trips/{{trip_id}}?_menthod=DELETE" method="POST" onsubmit="return confirm('Are you sure')?;">
       <button type="button" class="btn btn-danger"  id="confirmDeleteBtn">Confirm</button> 
      </form>
      </div>
    </div>
  </div>
</div>

  <!-- Modal for creating a new trip -->
  <div class="modal fade" id="createTripModal" tabindex="-1" aria-labelledby="createTripModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <form id="createTripForm" action="/trips" method="POST" class="needs-validation" novalidate>
          <div class="modal-header">
            <h5 class="modal-title" id="createTripModalLabel">Create a New Trip</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <label for="trip_name" class="form-label">Trip Name</label>
              <input
                type="text"
                class="form-control"
                id="trip_name"
                name="trip_name"
                required
              />
              <div class="invalid-feedback">Please enter a trip name.</div>
            </div>
            <div class="row">
              <div class="col-md-6 mb-3">
                <label for="date_start" class="form-label">Start Date</label>
                <input
                  type="date"
                  class="form-control"
                  id="date_start"
                  name="date_start"
                  required
                />
                <div class="invalid-feedback">Please choose a start date.</div>
              </div>
              <div class="col-md-6 mb-3">
                <label for="date_end" class="form-label">End Date</label>
                <input
                  type="date"
                  class="form-control"
                  id="date_end"
                  name="date_end"
                  required
                />
                <div class="invalid-feedback">Please choose an end date.</div>
              </div>
            </div>
            <!-- Added destination fields -->
            <div class="row">
              <div class="col-md-6 mb-3">
                <label for="city" class="form-label">City</label>
                <input
                  type="text"
                  class="form-control"
                  id="city"
                  name="city"
                  required
                />
              </div>
              <div class="col-md-6 mb-3">
                <label for="country" class="form-label">Country</label>
                <input
                  type="text"
                  class="form-control"
                  id="country"
                  name="country"
                  required
                />
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-success"><i class="bi bi-check-circle"></i> Create Trip</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Bootstrap JavaScript and dependencies -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<!-- Google Maps API -->
<script src="https://maps.googleapis.com/maps/api/js?key={{mapApiKey}}&libraries=places" async defer></script>

<script>
  // Form validation
  (function() {
    'use strict';
    window.addEventListener('load', function() {
      // Fetch all forms we want to apply validation to
      var forms = document.getElementsByClassName('needs-validation');
      // Loop over them and prevent submission
      var validation = Array.prototype.filter.call(forms, function(form) {
        form.addEventListener('submit', function(event) {
          if (form.checkValidity() === false) {
            event.preventDefault();
            event.stopPropagation();
          }
          form.classList.add('was-validated');
        }, false);
      });
    }, false);
  })();

  // Geocoding functionality
  document.addEventListener('DOMContentLoaded', function() {
  const tripForm = document.getElementById('createTripForm');
  
  if (tripForm) {
    tripForm.addEventListener('submit', function(event) {
      const cityField = document.getElementById('city');
      const countryField = document.getElementById('country');
      const dateStartField = document.getElementById('date_start');
      const dateEndField = document.getElementById('date_end');
      
      // Check if the end date is before the start date, and swap if needed
      if (dateStartField && dateEndField && dateStartField.value && dateEndField.value) {
        const startDate = new Date(dateStartField.value);
        const endDate = new Date(dateEndField.value);
        
        if (startDate > endDate) {
          // Swap dates
          const tempDate = dateStartField.value;
          dateStartField.value = dateEndField.value;
          dateEndField.value = tempDate;
          console.log("Dates were reordered to ensure start date is before end date");
        }
      }
      
      if (cityField && cityField.value && countryField && countryField.value) {
        event.preventDefault(); // Prevent default form submission
        
        // Use Google Maps Geocoder API to validate and correct location
        if (typeof google !== 'undefined' && google.maps) {
          const geocoder = new google.maps.Geocoder();
          
          geocoder.geocode({ 
            address: `${cityField.value}, ${countryField.value}`,
            language: 'en'  // Request English results
          }, function(results, status) {
            if (status === "OK" && results[0]) {
              // Get the precise coordinates for accurate pin placement
              const location = results[0].geometry.location;
              
              // Get the corrected address components from the geocoding result
              const addressComponents = results[0].address_components;
              let correctedCity = cityField.value; // Default to original if not found
              let correctedCountry = countryField.value; // Default to original if not found
              
              // Extract the correctly spelled city and country from the geocoding result
              for (const component of addressComponents) {
                const englishName = component.long_name;
                
                if (component.types.includes('locality')) {
                  correctedCity = englishName;
                } else if (component.types.includes('administrative_area_level_1')) {
                  // In some cases, the state/province might be more appropriate than locality
                  if (!correctedCity || correctedCity === cityField.value) {
                    correctedCity = englishName;
                  }
                } else if (component.types.includes('country')) {
                  correctedCountry = englishName;
                }
              }
              
              // Use original input if the corrected values don't look like English
              function looksLikeEnglish(text) {
                // Basic check for Latin characters, numbers, and common punctuation
                return /^[A-Za-z0-9\s.,'-]+$/.test(text);
              }
              
              if (!looksLikeEnglish(correctedCity)) {
                correctedCity = cityField.value;
              }
              
              if (!looksLikeEnglish(correctedCountry)) {
                correctedCountry = countryField.value;
              }
              
              // Update form fields with corrected values
              cityField.value = correctedCity;
              countryField.value = correctedCountry;
              
              // Add coordinates as hidden fields
              let latInput = document.getElementById('latitude');
              let lngInput = document.getElementById('longitude');
              
              if (!latInput) {
                latInput = document.createElement('input');
                latInput.type = 'hidden';
                latInput.name = 'latitude';
                latInput.id = 'latitude';
                tripForm.appendChild(latInput);
              }
              
              if (!lngInput) {
                lngInput = document.createElement('input');
                lngInput.type = 'hidden';
                lngInput.name = 'longitude';
                lngInput.id = 'longitude';
                tripForm.appendChild(lngInput);
              }
              
              latInput.value = location.lat();
              lngInput.value = location.lng();
              
              // Show notification about corrections if names were changed
              if (correctedCity !== cityField.value || correctedCountry !== countryField.value) {
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert alert-info alert-dismissible fade show';
                alertDiv.role = 'alert';
                alertDiv.innerHTML = `
                  <strong>Location Updated:</strong> We've corrected your location to "${correctedCity}, ${correctedCountry}".
                  <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                
                // Insert alert before the form
                tripForm.parentNode.insertBefore(alertDiv, tripForm);
              }
              
              // Create a new destination in the database first
              const destinationData = {
                city: correctedCity,
                country: correctedCountry,
                latitude: location.lat(),
                longitude: location.lng()
              };
              
              fetch('/api/destinations', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(destinationData)
              })
              .then(response => {
                if (!response.ok) {
                  throw new Error('Failed to create destination');
                }
                return response.json();
              })
              .then(savedDestination => {
                console.log("Destination created:", savedDestination);
                
                // Now submit the trip form with the destination ID
                let destIdInput = document.getElementById('destinationId');
                if (!destIdInput) {
                  destIdInput = document.createElement('input');
                  destIdInput.type = 'hidden';
                  destIdInput.name = 'destinationId';
                  destIdInput.id = 'destinationId';
                  tripForm.appendChild(destIdInput);
                }
                destIdInput.value = savedDestination.id;
                
                // Submit the form with corrected values and coordinates
                tripForm.submit();
              })
              .catch(error => {
                console.error("Error creating destination:", error);
                // Submit the form anyway even if destination creation failed
                tripForm.submit();
              });
            } else {
              // Geocoding failed, submit with original values
              console.warn(`Geocoding failed with status: ${status}`);
              tripForm.submit();
            }
          });
        } else {
          // Google Maps API not available, submit form anyway
          console.warn('Google Maps API not available');
          tripForm.submit();
        }
      }
    });
  }
});
 
  function deleteTrip(tripId) {
    // Store the tripId in a hidden variable or data attribute in the modal
    $('#deleteConfirmationModal').modal('show');  // Show the modal

    // When the "Confirm" button is clicked in the modal, delete the trip
    document.getElementById('confirmDeleteBtn').onclick = function() {
      // Send a DELETE request to the server
      fetch(`/trips/${tripId}`, {
        method: 'DELETE'
      })
      .then(response => {
        if (response.ok) {
          // Remove the trip card from the DOM
          const tripCard = document.getElementById(`trip-${tripId}`);
          if (tripCard) {
            tripCard.remove();
          }
          
          // Close the modal after successful deletion
          $('#deleteConfirmationModal').modal('hide');
        } 
        else {
          alert('Failed to delete trip. Please try again.');
        }
      })
      .catch(error => {
        console.error('Error deleting trip:', error);
        alert('Error deleting trip. Please try again.');
      });
    };
  }
</script>
</body>
</html>